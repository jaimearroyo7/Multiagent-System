// file: AgentsOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology;

import ontology.*;
import jade.content.onto.*;
import jade.content.schema.*;

/** file: AgentsOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2018/06/21, 11:49:00
 */
public class AgentsOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -461650205053931224L;

  //NAME
  public static final String ONTOLOGY_NAME = "Agents";
  // The singleton instance of this ontology
  private static Ontology theInstance = new AgentsOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String RIO="Rio";
    public static final String INDUSTRIA_EXTRACCIONSPEED="ExtraccionSpeed";
    public static final String INDUSTRIA_PRICESELL="priceSell";
    public static final String INDUSTRIA="Industria";
    public static final String EDAR_PRICEBUY="priceBuy";
    public static final String EDAR_DEPURACIONSPEED="DepuracionSpeed";
    public static final String EDAR="EDAR";
    public static final String MASADEAGUA_CONTAMINANTES="Contaminantes";
    public static final String MASADEAGUA_CAPACIDAD="Capacidad";
    public static final String MASADEAGUA_DBO="DBO";
    public static final String MASADEAGUA="MasadeAgua";

  /**
   * Constructor
  */
  private AgentsOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema masadeAguaSchema = new ConceptSchema(MASADEAGUA);
    add(masadeAguaSchema, ontology.MasadeAgua.class);

    // adding AgentAction(s)

    // adding AID(s)
    
    ConceptSchema edarSchema = new ConceptSchema(EDAR);
    add(edarSchema, ontology.EDAR.class);
    ConceptSchema industriaSchema = new ConceptSchema(INDUSTRIA);
    add(industriaSchema, ontology.Industria.class);
    ConceptSchema rioSchema = new ConceptSchema(RIO);
    add(rioSchema, ontology.Rio.class);

    // adding Predicate(s)


    // adding fields/*
    masadeAguaSchema.add(MASADEAGUA_DBO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    masadeAguaSchema.add(MASADEAGUA_CAPACIDAD, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    masadeAguaSchema.add(MASADEAGUA_CONTAMINANTES, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    edarSchema.add(EDAR_DEPURACIONSPEED, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    edarSchema.add(EDAR_PRICEBUY, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    industriaSchema.add(INDUSTRIA_PRICESELL, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    industriaSchema.add(INDUSTRIA_EXTRACCIONSPEED, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
